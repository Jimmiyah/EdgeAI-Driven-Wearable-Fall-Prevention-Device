/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 27.10.2024 16:06:18

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1440;
#else
constexpr int kTensorArenaSize = 416;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,78 } };
const TfArray<1, float> quant0_scale = { 1, { 0.049265917390584946, } };
const TfArray<1, int> quant0_zero = { 1, { -49 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[5] = { -130, -136, 66, 154, -19, };
const TfArray<1, int> tensor_dimension1 = { 1, { 5 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00055077811703085899, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const ALIGN(16) int8_t tensor_data2[5*10] = { 
  64, -43, -66, 55, -66, 7, 44, -81, 60, 4, 
  52, 65, -1, 5, -80, 91, -36, 43, 93, 54, 
  -82, -5, -37, -100, -89, 70, 112, 11, 36, 45, 
  5, 127, -96, 54, -48, -17, -52, -57, -30, -65, 
  52, -105, -85, 34, -114, 23, 63, -100, -30, 68, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 5,10 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0061585218645632267, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[10] = { -97, 359, -24, 52, -52, -78, 110, -138, -75, -47, };
const TfArray<1, int> tensor_dimension3 = { 1, { 10 } };
const TfArray<1, float> quant3_scale = { 1, { 0.00026107404846698046, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[10*20] = { 
  31, -70, -70, 11, 88, 6, 83, -96, -2, -33, 35, 17, 56, 103, 40, -85, -8, -29, -54, 23, 
  -33, -90, 90, 59, 48, -29, -25, -68, -76, -1, -43, -39, 55, 16, 88, 106, -44, 53, -35, -27, 
  -21, -86, -3, 93, -43, -53, -31, 17, -36, -11, 28, 45, -19, -77, -13, -62, 73, -87, -90, -71, 
  64, 11, 93, 3, -58, 73, -85, -41, -20, 104, 127, 43, -64, -78, -8, -55, -27, -45, 117, 76, 
  -55, 57, -69, -37, -74, 50, -28, 20, -76, 72, 122, 54, -18, 43, 13, -88, -66, 94, 43, 55, 
  -75, 57, -66, 44, -28, -104, -11, 64, -107, -41, 65, 49, -45, 54, -26, -64, -37, 51, -58, 4, 
  85, 39, -56, -70, 70, 88, 41, -28, -27, 15, 63, 33, -63, -34, 15, -4, 76, -18, -10, -28, 
  -21, 75, 28, 53, -11, 69, 64, -104, 96, -35, -67, 95, 58, -27, -102, 28, 71, -3, 2, 72, 
  61, 35, 59, 35, 75, 35, -122, -28, -20, 33, 122, 15, -4, -84, -34, 69, -93, 81, -58, -24, 
  63, -69, -33, -2, 69, 108, -39, 11, 62, -105, -96, 38, -66, -50, 52, -29, 7, 96, 25, 65, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 10,20 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0043485029600560665, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[20] = { 410, -235, 331, -39, -56, 291, 291, -338, -262, 74, 345, -233, 0, -193, 587, 543, -67, -6, 431, -110, };
const TfArray<1, int> tensor_dimension5 = { 1, { 20 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00014348435797728598, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[20*78] = { 
  -21, -33, -16, 90, 45, 32, 5, -79, 1, -94, -30, 3, -101, -39, 3, 81, 42, 81, -40, -45, 62, -37, 53, -1, -95, 35, -11, -43, -90, -52, 47, 30, 50, -80, -96, 24, -60, 47, -25, -23, 42, -28, -42, -6, -76, 56, -47, 54, -72, -77, -33, -97, 45, -36, -55, 73, 96, 61, 62, 30, 12, -53, -10, -78, -32, -39, 11, 27, 92, 11, 24, -80, -64, -35, -33, -61, 42, 23, 
  -100, 17, 73, -3, -37, -1, 12, 8, 18, 57, -74, 14, -10, 3, 44, -41, 54, 33, 70, -65, -29, -27, 50, -34, 23, 21, -20, 59, -28, -72, -19, 66, 62, 70, 44, -31, -66, -9, 16, -50, -49, -30, 69, 44, 30, -38, 53, -62, 6, 1, -76, -9, -8, -12, -29, -94, -82, 53, 55, -69, -9, 67, -24, -4, -10, -14, 69, -68, 34, -35, 60, -67, 32, -17, 3, 61, -31, -52, 
  91, 30, -72, -49, 39, -9, 89, 112, 120, 28, -29, 44, -33, 41, -76, 64, 37, 50, 20, 48, 97, -80, 51, -66, 9, -35, 53, 60, 2, -58, -47, 69, 38, -67, -16, -56, -108, -36, 38, -93, 31, 60, -65, -5, -1, -58, -77, -94, -2, -55, 13, -44, 7, 37, 49, -59, 10, 32, 42, -21, 70, -39, -25, 2, -36, 46, 32, -67, -13, -21, -17, -115, -28, 37, -45, -102, -101, 15, 
  -71, 43, -43, 48, -8, 47, -10, 79, 40, -73, 66, 65, 39, 50, 35, -18, -66, -43, 26, 51, -57, 32, -56, -33, 49, 41, -62, 48, 72, 52, -38, 33, 68, -39, 49, 9, 81, -80, 17, 56, -71, 53, -1, 63, 78, -67, -3, -52, 52, 41, -53, -1, -18, -83, 18, -66, -72, -84, -36, -9, 77, 30, 81, 62, -54, -77, 49, -70, -55, -79, 46, -46, -47, -62, 16, 27, -22, 83, 
  65, 15, 16, -56, -69, -66, 67, -23, -43, 46, -27, 12, -56, -40, -59, 44, 46, 52, -10, -22, -12, 74, -20, -16, -30, 1, 58, 55, -74, -70, 35, -57, 71, -63, -30, -44, -29, -80, 15, 45, 9, 28, -77, -33, 44, -55, 58, 49, -14, 59, 56, 63, -68, -22, -21, 78, 51, 62, 70, 47, -70, -65, 79, 80, 7, 44, -39, 86, -85, -23, -76, 19, 55, 26, 32, 36, -31, -26, 
  -50, 41, 20, 15, -3, -82, -15, 52, -70, -20, -117, -69, -121, 50, 24, -4, -58, 47, -29, 3, -76, -87, -29, -61, 38, -46, 45, -24, -76, 104, 13, -14, 59, -68, -6, -96, 46, -67, 11, 97, 67, 11, -41, -4, 11, -95, -82, -76, -20, 38, 56, -31, 35, -54, 32, 67, 48, -16, 23, -17, 0, -99, 36, -85, -42, 13, -24, 70, 90, 59, 85, -39, 49, -71, -97, -67, -24, -25, 
  52, -64, -44, -32, -40, -76, -16, 71, -23, 14, 0, -4, 1, 64, 76, -28, -19, -27, 96, 78, -30, 36, -39, 51, -41, 10, 122, -92, 26, 34, 66, -54, 32, 28, -36, 99, -23, 82, -52, 127, 18, -5, 8, 19, 3, -23, 109, -34, 7, -1, -44, 75, -64, 14, 25, 6, 23, 80, 42, -43, -70, -10, 44, -68, 24, 49, -87, 42, -48, -32, 45, 109, 9, 67, 43, 63, 52, 80, 
  36, -112, 38, 56, 62, -2, -6, 5, -55, 44, -45, 56, -54, 17, -53, -70, -42, -54, -78, 57, 48, -68, -59, -15, -30, 76, -27, 23, -101, -25, 13, 55, 0, -93, -48, -81, -12, 26, 50, -34, -16, 27, 69, 66, 23, 5, 32, -58, -33, 60, -41, -8, -35, -5, -20, -66, -79, 41, 37, -80, -47, -15, 56, -48, 58, 8, -2, -27, -54, 72, -63, 14, -8, 48, 12, 29, -17, 63, 
  37, 85, 48, -26, -78, 42, -16, -50, -3, -8, 12, 58, 55, -36, 3, -45, 23, -46, 78, 17, 81, 64, 83, 42, 60, 62, 49, -17, 60, -85, 39, -91, -17, 0, -63, -17, -66, 79, -47, -2, -36, -37, -88, -42, -70, 34, -19, 0, -33, 36, -67, -71, 69, -59, 36, 28, 1, 32, -9, -26, 61, -11, 80, -25, 13, -87, 68, 71, 39, -55, -35, -19, 22, -58, -16, -65, -51, -28, 
  -68, 54, -51, -7, -56, 50, -75, 0, -49, -87, -74, -62, -90, -31, -21, 80, -4, 57, 31, -74, -34, 32, -3, 61, 67, 39, -3, 55, 46, 33, -52, -8, -49, 8, 62, 28, 57, 62, -14, -30, 17, 87, -47, 14, -75, -118, 24, 6, 45, -92, 18, 54, -110, -101, -2, 15, 42, -36, -109, -2, -102, -72, -84, 39, -24, -68, -60, 34, -62, 22, -103, 10, 32, -36, -53, -102, 41, -59, 
  83, 35, 36, -72, -81, -20, 60, 5, -21, 12, -80, 8, 4, -71, 72, -27, 14, 7, 11, -2, -93, 12, -104, 41, 44, -41, -23, 5, 104, 64, -93, -35, -39, -9, 79, 68, -32, -76, -76, -11, 8, 30, 13, -34, -68, 23, -27, -111, 19, 2, -56, -82, -14, 10, 95, 84, -59, -59, -5, -44, -11, -3, 23, 26, -10, -120, -49, 75, 48, 23, 15, -35, -59, -73, -39, 37, -14, -89, 
  -22, 39, 80, -38, -75, -86, 73, -44, 51, -30, 62, 67, 44, 65, -42, 37, -47, -38, 65, -9, -30, -28, 71, -7, 16, 24, 42, 37, 85, 20, -19, -29, -7, -44, 13, -28, -66, 14, 15, 34, 29, 70, 61, -25, -55, -35, 16, 45, -63, 4, -51, 69, 14, 40, 65, 36, 30, -27, -2, -77, 72, 55, 8, -12, 70, 40, 56, -10, -29, -32, -76, -7, -57, -59, 62, 20, 36, 68, 
  -39, -81, 1, -27, 51, -73, -50, -82, -68, 40, -20, -78, 21, 45, -29, 62, 11, -29, 70, -23, 39, 47, -53, 53, 42, -27, 6, -41, 70, -22, -36, 20, -82, 76, 52, 52, 68, -55, -71, -52, -10, 13, -68, -41, -84, -33, 77, 48, -13, 84, 56, -75, -84, 16, -55, -83, -57, 26, -16, 37, -28, -61, -64, 56, 13, 21, 56, 32, 7, 58, 0, -40, 38, 54, 23, -83, -33, 64, 
  14, -74, -42, -14, 65, 76, -69, 84, -4, 28, 24, 30, 83, 17, -7, -57, -94, -23, -73, -30, -60, -59, 4, -19, -27, -76, -63, 78, -6, -3, 16, -84, -57, -74, -3, 29, 47, 3, 77, -34, 79, 46, 60, -71, 73, -35, 4, 57, 93, 60, 36, 48, -70, -37, 67, -43, 5, 55, 49, -7, 9, -20, -5, -56, 64, 59, 71, 66, 7, 70, -69, -7, 62, -6, 49, -52, -36, -29, 
  109, -64, -68, 47, 37, -17, -5, 56, 60, 43, 94, -75, -64, 112, -76, -34, -46, 38, 81, -37, 93, 96, -33, 66, -77, -52, 11, -83, 53, 6, 113, -16, -20, 60, -18, -69, -83, 2, 51, -52, -68, 34, -51, 85, 15, 48, -46, -72, -102, -57, -38, 16, 60, -16, -55, -26, 102, 14, 97, -53, -8, 18, -68, 57, -7, 106, 80, 15, 15, 75, 40, -30, 80, -41, 63, 30, -48, 7, 
  36, 105, -89, -54, -57, 59, 29, 53, 69, 65, 32, 68, -14, 72, 51, 33, 40, 60, 63, 86, -40, 108, -29, 78, 60, 36, -13, -44, -7, -23, 40, 5, 5, 81, 24, 45, 25, -60, 35, 90, 68, -36, 51, -35, 84, -56, -91, -41, -83, 36, 13, -30, 91, 65, 38, -24, 92, 70, -23, 84, -5, -65, 1, -52, -4, 57, 15, -68, 33, 78, -52, 78, 55, 49, 12, 38, -60, -7, 
  -22, -93, -39, -8, 69, -41, -53, -86, 11, -90, -90, -41, 7, 49, -2, 23, -69, -42, 35, -27, -70, -41, 32, -37, 34, -22, 16, 47, -105, 63, 38, -4, 72, -49, -27, -36, 39, -63, -37, 44, 11, -47, 13, 63, 25, -39, 87, -60, 12, -13, 24, 5, -25, -99, -30, -80, -9, -19, 43, -60, -53, 75, -46, 8, -56, 64, -21, -48, -2, 82, -33, 14, -17, 98, 86, 66, -18, 45, 
  -21, 70, 87, 68, 82, -26, -28, 71, 28, -12, -29, 82, -34, 65, -77, -56, -50, 42, 78, -38, 52, -36, -48, 105, -27, -63, -51, 18, 16, -43, 2, -65, 7, 22, 1, 81, 82, -47, 54, -96, -70, 8, 87, -19, 2, -84, -17, 57, -84, 21, -58, -68, 87, 54, 19, -58, 74, -69, -8, -32, 30, -61, 46, 84, -15, 24, -1, 22, 30, -17, 40, -61, 22, 44, 10, -6, -95, -91, 
  -80, -32, 34, -65, 53, 3, -91, -42, -33, -59, -108, -62, -100, -79, -94, -10, 21, -43, -64, 1, -73, 38, -77, 34, -68, -105, -28, -11, -62, -39, 55, -64, -94, -115, 51, 31, -13, -91, -95, -30, -64, -23, -32, 59, -29, -42, 58, -4, -92, -104, -21, -95, 52, -14, 64, -39, -36, -68, -44, 39, -47, -64, -76, 46, 21, -37, 101, -96, 25, 94, 36, 24, 42, -59, -102, 2, 53, -6, 
  -8, 61, 2, -47, -20, -28, 30, -6, 66, 63, -63, 72, 64, -6, -4, -38, -8, -75, -40, 28, -26, -72, 72, -61, 0, 8, -60, -40, 28, 61, -64, 13, 76, -47, 13, 35, -72, 24, 11, -15, -50, -63, 17, 42, 6, -63, -73, 28, -3, 9, 27, 44, -76, 26, 34, -49, 40, -67, -52, 76, -60, 62, -57, 35, -58, -14, -13, -53, -66, -55, -75, 61, -19, -6, -13, 34, -65, -77, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 20,78 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0029124466236680746, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,20 } };
const TfArray<1, float> quant7_scale = { 1, { 0.060037687420845032, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,10 } };
const TfArray<1, float> quant8_scale = { 1, { 0.089433491230010986, } };
const TfArray<1, int> quant8_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,5 } };
const TfArray<1, float> quant9_scale = { 1, { 0.075571306049823761, } };
const TfArray<1, int> quant9_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<2, int> tensor_dimension10 = { 2, { 1,5 } };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant10_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 78, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 50, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1560, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension7, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 10, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 16), (TfLiteIntArray*)&g0::tensor_dimension9, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension10, 5, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_8_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_8_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
